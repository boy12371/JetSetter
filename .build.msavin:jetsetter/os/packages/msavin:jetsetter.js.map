{"version":3,"file":"/packages/msavin:jetsetter.js","sources":["msavin:jetsetter/jetsetter.js"],"names":[],"mappings":";;;;;;;;AAAA,sB;AACA,I;AACA,qB;AACA,gC;AACA,0E;AACA,qD;AACA,S;AACA,K;;;AAGA,0B;;AAEA,+B;AACA,+B;AACA,oD;AACA,iB;;AAEA,Y;AACA,M;AACA,iD;AACA,+B;AACA,qD;AACA,W;;AAEA,K;;AAEA,I;AACA,0B;AACA,gC;AACA,iC;AACA,4B;AACA,a;AACA,U;AACA,mC;AACA,6C;AACA,4B;AACA,a;AACA,U;AACA,gC;AACA,mC;AACA,4B;AACA,a;AACA,U;AACA,kC;AACA,4C;AACA,4B;AACA,a;AACA,U;AACA,kC;AACA,4C;AACA,4B;AACA,e;AACA,S;AACA,K;;AAEA,2B;AACA,wC;;AAEA,2C;AACA,8D;AACA,oB;AACA,4B;AACA,a;AACA,U;AACA,mC;AACA,yC;AACA,iD;;AAEA,+C;AACA,0B;AACA,kC;AACA,a;;AAEA,kD;AACA,yB;AACA,U;AACA,4B;AACA,Y;AACA,0C;;AAEA,2B;AACA,gD;AACA,yC;AACA,0B;AACA,mD;AACA,kD;AACA,0B;AACA,kD;AACA,iC;AACA,0B;AACA,kD;AACA,6C;AACA,0B;AACA,iD;AACA,6C;AACA,0B;AACA,wB;AACA,2C;AACA,0B;AACA,a;;AAEA,S;AACA,O;;AAEA,0B;AACA,6C;AACA,Y;AACA,0G;AACA,Y;AACA,4E;AACA,0G;AACA,uB;;AAEA,mC;AACA,oC;AACA,oD;AACA,iC;AACA,mC;AACA,mD;AACA,iC;AACA,mC;AACA,mD;AACA,0C;AACA,iC;AACA,+B;AACA,oD;AACA,iC;AACA,oB;AACA,gB;AACA,0C;AACA,gB;AACA,S;AACA,O;;AAEA,C","sourcesContent":["if (Meteor.isClient) {\n    \n    var JetSetter = {\n        \"getKeys\": function () {\n            var JetSetter_Keys = Object.getOwnPropertyNames(Session.keys);\n            Session.set(\"JetSetter\", JetSetter_Keys);\n        }\n    }\n\n\n    if (!Object.observe) {\n\n        setInterval(function(){\n            JetSetter.getKeys()\n            // MongolPackage.setSubscriptionKeys(); \n        }, 3000);\n\n    } else {\n      \n        Object.observe(Session.keys, function() {\n            JetSetter.getKeys()\n            // MongolPackage.setSubscriptionKeys();  \n        });\n\n    }\n\n    \n    var SessionChecker = {\n        null: function (value) {\n            if (value === null) {\n                return true;\n            }\n        },\n        boolean: function (value) {\n            if (typeof value === \"boolean\") {\n                return true;\n            }\n        },\n        array: function(value) {\n            if ($.isArray(value)) {\n                return true;\n            }\n        },\n        number: function (value) {\n            if (typeof value === \"number\") {\n                return true;\n            }\n        },\n        string: function (value) {\n            if (typeof value === \"string\") {\n                return true;\n            }  \n        }\n    }\n\n    Template.body.helpers({\n        JetSetter_enabled: function () {\n\n            if (Package['msavin:mongol']) {\n                return Session.get(\"Mongol_settings_display\");\n            } else {\n                return true;\n            }\n        },\n        SessionItems: function () {\n            // Hide the JetSetter session\n            var array = Session.get(\"JetSetter\");\n\n            var i = array.indexOf(\"JetSetter\");\n            if (i != -1) {\n                array.splice(i, 1)\n            }\n\n            // Return just the developers sessions\n            return array;\n        },\n        value: function () {\n            \n            var value = Session.get(this);\n\n            switch (true) {\n                case SessionChecker.null(value):\n                    return '<i>null</i>';\n                    break;\n                case SessionChecker.boolean(value):\n                    return '<i>' + value + '</i>';\n                    break;\n                case SessionChecker.number(value):\n                    return value;\n                    break;\n                case SessionChecker.string(value):\n                    return '\"' + value + '\"';\n                    break;\n                case SessionChecker.array(value):\n                    return \"[\" + value + \"]\";\n                    break;\n                default:\n                    return \"<i>Object</i>\";\n                    break;\n            }\n\n        }\n    });\n\n    Template.body.events({\n        'click .JetSetter_row': function () {\n            \n            // var value = prompt(\"What would you like to change the value of this Session variable to?\");\n            \n            // if (value === \"\" || value === null || value === undefined)  {\n            //     console.log(\"JetSetter: Prompt entry cannot be empty. To set null value, enter null.\");\n            // } else {\n\n            //     switch (value) {\n            //         case \"false\":\n            //             Session.set(this, false);\n            //             break;\n            //         case \"true\":\n            //             Session.set(this, true);\n            //             break;\n            //         case \"null\":\n            //             Session.set(this, null);\n            //             value = \"null\";\n            //             break;\n            //         default:\n            //             Session.set(this, value);\n            //             break;\n            //     }\n            // }\n            console.log(Session.get(this))\n                \n        }\n    });\n\n}"]}